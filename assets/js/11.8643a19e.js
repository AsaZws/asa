(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{183:function(t,s,a){},219:function(t,s,a){"use strict";var e=a(183);a.n(e).a},289:function(t,s,a){"use strict";a.r(s);var e=[["2019-11",{excerpt:" 非常不错的总结，强烈建议保存下来，需要的时候看一看。    \x3c!-- TOC --\x3e  - [基本操作](基本操作)  - [数据库操作](数据库操作)  - [表的操作](表的操作)  - [数据操作](数据操作)  - [字符集编码](字符集编码)  - [数据类型(列类型)](数据类型列类型)  - [列属性(列约束)](列属性列约束)  - [建表规范](建表规范)  -......",tags:["数据库"],id:0,title:"2019-11-22【MySQL数据库学习笔记】",lastUpdated:"2019-11-22 11:50:34",path:"/posts/2019-11-22%E3%80%90MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91.html"}],["2019-09",{excerpt:" [最新最完美车牌框输入键盘](https://asazws.github.io/binding/parkingPayment/parkingPayment.html)    [车牌最新输入框版](https://asazws.github.io/binding/plate-object/plate.html)    [车牌键盘框](https://asazws.github.io/binding......",tags:["javascript"],id:1,title:"2019-09-30【车牌键盘】",lastUpdated:"2019-09-30 00:12:24",path:"/posts/2019-09-30%E3%80%90%E8%BD%A6%E7%89%8C%E9%94%AE%E7%9B%98%E3%80%91.html"}],["2019-05",{excerpt:'  组合继承模式的问题      最大的问题是无论什么情况下都会调用两次超类型构造函数：一次式创建子类型原型的时候，另一次是在子类型构造函数内部，但我们不得不在调用子类型构造函数时重写这些属性     下面我们来看一个实例    ```js  function SuperType(name) {      this.name = name;      this.colors = ["......',tags:["javascript"],id:2,title:"2019-05-26【寄生组合式继承】",lastUpdated:"2019-05-26 22:45:55",path:"/posts/2019-05-26%E3%80%90%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF%E3%80%91.html"},{excerpt:'  原型链的问题      原型链虽然很强大，可以用它来实现继承，但是它也存在一些问题。其中，最主要的问题是来自包含引用类型值的原型，它会影响原来的值。    下面我们来看一个实例     js    下面的代码会说明这个问题    ```js  function SuperType() {      this.colors = ["red","blue","green"];  } ......',tags:["javascript"],id:3,title:"2019-05-24【原型链继承】",lastUpdated:"2019-05-24 22:59:15",path:"/posts/2019-05-24%E3%80%90%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF%E3%80%91.html"},{excerpt:'  前端分页做来玩玩      分页常见于数据量大的时候，但是一般都是后端来实现的，前端请求就完事了，现在就前端也想来研究一下，大约实现了下功能，还有待优化。       html    结构包含首页尾页，上一页下一页，自定义输入页码。    ```html  <div class="main">      <ul>          <li class="first" id="ho......',tags:["javascript"],id:4,title:"2019-05-18【前端分页】",lastUpdated:"2019-05-18 16:20:10",path:"/posts/2019-05-18%E3%80%90%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E3%80%91.html"}],["2019-03",{excerpt:"  面向对象的选项卡      一般写一个选项卡的时候，用面向过程去写是比较简单的，但是想复用的时候，就比较麻烦了，但是用面向对象的方法去写一个选项卡，写的时候虽然复杂了点，但是想复用的时候就比较简单了，只需要new一下就可以了，下面我用面向过程和面向对象的两种方法，分别来写一下选项卡的例子       面向过程的选项卡    我们来看一个例子,这样的结构很清晰，一目了然，但是不好复......",tags:["javascript"],id:5,title:"2019-03-20【面向对象选项卡】",lastUpdated:"2019-03-20 13:09:25",path:"/posts/2019-03-20%E3%80%90%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%80%89%E9%A1%B9%E5%8D%A1%E3%80%91.html"},{excerpt:"  原型对象的问题      原型模式也不是没有缺点。首先，它省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值。虽然这会在某种程度上带来一些不方便，但还不是原型的最大问题。原型模式的最大问题是由其共享的本质所导致的。      原型中所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性到也说的过去，通过在实例上添加了一个同名属性，......",tags:["javascript"],id:6,title:"2019-03-14【原型对象是被很多实例共享的】",lastUpdated:"2019-03-14 10:54:24",path:"/posts/2019-03-14%E3%80%90%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%E6%98%AF%E8%A2%AB%E5%BE%88%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%85%B1%E4%BA%AB%E7%9A%84%E3%80%91.html"},{excerpt:"  安卓手机键盘弹起顶起footer      前天没发文章，确实是工作原因，这里提醒下自己，希望自己坚持，下面这个是这两天工作上遇到的问题，所以记录下来，下次就能避开这个坑。      昨晚领导截图发给我这个问题，于是我四处找解决办法，最终发现以监听键盘弹起或者落下来处理这个问题最佳！    ```js  var winHeight = $(window).height();   //获取......",tags:["javascript"],id:7,title:"2019-03-08【安卓手机键盘弹起顶起footer】",lastUpdated:"2019-03-08 12:51:36",path:"/posts/2019-03-08%E3%80%90%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98%E5%BC%B9%E8%B5%B7%E9%A1%B6%E8%B5%B7footer%E3%80%91.html"},{excerpt:"  vue生命周期图详解      本篇我们学习 Vue 的生命周期，先来看一下 Vue 的生命周期的定义。      > 每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。     这是 Vue 官网上......",tags:["vue"],id:8,title:"2019-03-05【VUE生命周期图】",lastUpdated:"2019-03-05 20:37:48",path:"/posts/2019-03-05%E3%80%90VUE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E3%80%91.html"},{excerpt:'  纯css撸一个时间轴    工作中有时会接到时间轴文字排版的需求，于是我就写了一个保存下来，以便以后用到      html代码    ```html  <div class="track-rcol">      <div class="track-list">          <ul>              <li class="first">                  ......',tags:["css"],id:9,title:"2019-03-04【纯css撸一个时间轴】",lastUpdated:"2019-03-03 12:47:48",path:"/posts/2019-03-04%E3%80%90%E7%BA%AFCSS%E6%92%B8%E4%B8%80%E4%B8%AA%E6%97%B6%E9%97%B4%E8%BD%B4%E3%80%91.html"},{excerpt:"  js手动实现一个new    要想手动实现一个new，就要知道new究竟干了什么        我们先new一下    ```js  var obj = new Test();  ```    其实上面这个new就干了三件事：    ```js  var obj = {};  // 我们创建了一个空对象obj  obj.__proto__ = Test.prototype;  // 我们......",tags:["javascript"],id:10,title:"2019-03-03【js手动实现一个new】",lastUpdated:"2019-03-03 12:40:18",path:"/posts/2019-03-03%E3%80%90js%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAnew%E3%80%91.html"},{excerpt:"  更新版本-1.19.3  报如下错误  ![](https://user-gold-cdn.xitu.io/2018/2/1/1614f0384a6c3daa?w=997&h=74&f=png&s=10671)  原因可能是 git.path 设置成了null, 按照如下更改后重启Vs就好了  ![](https://user-gold-cdn.xitu.io/2018/2/1/161......",tags:["vscode"],id:11,title:"2019-03-02【vscde-git报错】",lastUpdated:"2019-03-02 23:50:08",path:"/posts/2019-03-02%E3%80%90vscode-gitbaoc%E3%80%91.html"},{excerpt:"  ES5中的类  在ES5中，我们把 new 理解成 javascript 面向对象的一部分，下面我们就来看一下 new 操作具体为我们做了那些事情。       new运算符接收一个构造器和一组调用参数，实际上做了几件事：      1.以构造器的prototype属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；      2.将this和调用参数传给构造器，执......",tags:["javascript"],id:12,title:"2019-03-01【javascript中的类】",lastUpdated:"2019-03-01 09:01:08",path:"/posts/2019-03-01%E3%80%90javascript%E4%B8%AD%E7%9A%84%E7%B1%BB%E3%80%91.html"}],["2019-02",{excerpt:" mac由于平时不太了解，导致后面npm出错，现在想删除重装   删除   如果是用 brew 安装的node，用下面的命令卸载      brew uninstall node   进入 /usr/local/bin 删除 node 执行文件      cd /usr/local/bin        sudo rm -rf /usr/local/bin/npm      ......",tags:["mac"],id:13,title:"2019-2-28【mac下node和npm删除及重新安装】",lastUpdated:"2019-02-28 08:47:08",path:"/posts/2019-2-28%E3%80%90mac%E4%B8%8Bnode%E5%92%8Cnpm%E5%88%A0%E9%99%A4%E5%8F%8A%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E3%80%91.html"},{excerpt:" SASS具有两种语法。新的主要语法（SASS 3）称作SCSS (Sassy CSS)，同时支持CSS3的语法。也就是说只要CSS3支持的在SCSS中也被支持。SCSS文件扩展名为'.scss'，这也是当下使用最多的。     scss预处理器的编译方法  - 由于SASS是在Ruby环境下运行，所以大家首先需要在自己的工作电脑上安装Ruby。  -  检测Ruby是否已安装：  ``` ......",tags:["css"],id:14,title:"2019-2-27【SASS安装与学习】",lastUpdated:"2019-02-27 08:30:08",path:"/posts/2019-2-27%E3%80%90SASS%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AD%A6%E4%B9%A0%E3%80%91.html"},{excerpt:"  一、每天上班前多想想当天的工作如何开展。   二、多看书，多看书，多看书。    > 1) 书架上的书先撸完   三、好好维护vuepress技术博客，每天7点早起（周末可睡到8点），一天一篇技术点文章，每周写一篇总结，希望坚持下去（喝酒当天另算）！   四、前端持续学习  >1) css技术样式，重点学习css3、sass。    >2) js不间断学习，重点......",tags:["个人规划"],id:15,title:"2019-2-26【2019年应该要做的事情】",lastUpdated:"2019-02-26 11:05:08",path:"/posts/2019-2-26%E3%80%902019%E5%B9%B4%E5%BA%94%E8%AF%A5%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E3%80%91.html"}]],E={name:"All",data:function(){return{poList:e}},props:{content:{type:Array,default:function(){return[]}}},methods:{toTaglist:function(t){this.$router.push("/tags/"+t.target.innerText)}}},i=(a(219),a(17)),p=Object(i.a)(E,(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"all-warp"},t._l(t.poList,(function(s,e){return a("div",{key:e},[a("h3",[t._v(t._s(s[0]))]),t._v(" "),a("el-row",{staticClass:"post-warp",attrs:{type:"flex",justify:"center",align:"middle"}},[t._l(s,(function(s,e){return[0!==e?a("el-col",{key:e,staticClass:"post post-card",attrs:{span:20,xs:{span:23},sm:{span:23},md:{span:23},lg:{span:20}}},[a("el-card",{staticClass:"box-card"},[a("div",{attrs:{slot:"header"},slot:"header"},[a("p",{staticClass:"post-title-time"},[t._v(t._s(s.lastUpdated))]),t._v(" "),a("router-link",{staticClass:"post-title-link",attrs:{to:s.path}},[t._v(t._s(s.title))])],1),t._v(" "),s.excerpt||s.tags.length?a("div",[s.excerpt?a("div",[a("div",{staticClass:"post-excerpt",domProps:{innerHTML:t._s(s.excerpt)}})]):t._e(),t._v(" "),s.tags.length?a("div",{staticClass:"post-footer"},t._l(s.tags,(function(s,e){return a("el-tag",{key:e,attrs:{size:"medium",hit:!0},on:{click:t.toTaglist}},[t._v(t._s(s))])})),1):t._e()]):t._e()])],1):t._e()]}))],2)],1)})),0)}),[],!1,null,"42dacdfd",null);s.default=p.exports}}]);